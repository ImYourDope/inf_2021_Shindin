#USED LIBRARIES
import pygame
from pygame.draw import *
from random import randint
import math


#LIST OF PARAMETERS
print('Enter the game time in seconds: ')
gametime = int(input())
FPS = 30
ball_points = 1
square_points = 5
screen_xsize = 1200
screen_ysize = 900
#BALL PARAMETERS
ball_number = 5
maxball_r = 50
minball_r = 30
maxball_V = 200
minball_V = 50
#SQUARE PARAMETERS
square_number = 2
minsquare_size = 35
maxsquare_size = 50
minsquare_V = 150
maxsquare_V = 250


#DEFINITIONS
timedelta = 1/FPS
player_score = 0
timer = FPS*gametime
timecounter = 0
#BALL DEFINITIONS
ball_r = [None]*ball_number
ball_x = [None]*ball_number
ball_y = [None]*ball_number
ball_Vx = [None]*ball_number
ball_Vy = [None]*ball_number
ball_color = [None]*ball_number
#SQUARE DEFINITIONS
square_size = [None]*square_number
square_x = [None]*square_number
square_y = [None]*square_number
square_Vx = [None]*square_number
square_Vy = [None]*square_number
square_color = [None]*square_number



#LIST OF COLORS
red = (255, 0, 0)
blue = (0, 0, 255)
yellow = (255, 255, 0)
green = (0, 255, 0)
magenta = (255, 0, 255)
cyan = (0, 255, 255)
black = (0, 0, 0)
white = (255, 255, 255)
colors = [red, blue, yellow, green, magenta, cyan]


#RANDOM NEW BALL PARAMETERS
def ball_create(i):
    ball_x[i] = randint(2*maxball_r, screen_xsize - 2*maxball_r)
    ball_y[i] = randint(2*maxball_r, screen_ysize - 2*maxball_r)
    ball_r[i] = randint(minball_r,maxball_r)
    ball_color[i] = colors[randint(0, len(colors)-1)]
    ball_Vx[i] = randint(-maxball_V, maxball_V)
    ball_Vy[i] = randint(-maxball_V, maxball_V)


#RANDOM NEW SQUARE PARAMETERS
def square_create(i):
    square_x[i] = randint(maxsquare_size, screen_xsize - maxsquare_size)
    square_y[i] = randint(maxsquare_size, screen_ysize - maxsquare_size)
    square_size[i] = randint(minsquare_size, maxsquare_size)
    square_color[i] = colors[randint(0, len(colors)-1)]
    square_Vx[i] = randint(-maxsquare_V, maxsquare_V)
    square_Vy[i] = randint(-maxsquare_V, maxsquare_V)
    
    
#DRAW A BALL
def ball_draw(i):
    circle(screen, ball_color[i], (ball_x[i], ball_y[i]), ball_r[i])
    circle(screen, black, (ball_x[i], ball_y[i]), ball_r[i], 1)
    

#DRAW A SQUARE
def square_draw(i):
    rect(screen, square_color[i], (square_x[i], square_y[i], square_size[i], square_size[i]))
    rect(screen, black, (square_x[i], square_y[i], square_size[i], square_size[i]), 1)


#BALL REFLECTION FROM THE WALLS
def ball_wallbounce(i):
    if (ball_x[i] < ball_r[i]) and (ball_Vx[i] < 0):
        ball_Vx[i] = randint(minball_V, maxball_V)
    elif (ball_x[i] > screen_xsize-ball_r[i]) and (ball_Vx[i] > 0):
        ball_Vx[i] = randint(-maxball_V, -minball_V)
    elif (ball_y[i] < ball_r[i]) and (ball_Vy[i] < 0):
        ball_Vy[i] = randint(minball_V, maxball_V)
    elif (ball_y[i] > screen_ysize-ball_r[i]) and (ball_Vy[i] > 0):
        ball_Vy[i] = randint(-maxball_V, -minball_V)


#SQUARE REFLECTION FROM THE WALLS
def square_wallbounce(i):
    if (square_x[i] < 0) and (square_Vx[i] < 0):
        square_Vx[i] = randint(minsquare_V, maxsquare_V)
    elif (square_x[i] > screen_xsize-square_size[i]) and (square_Vx[i] > 0):
        square_Vx[i] = randint(-maxsquare_V, minsquare_V)
    elif (square_y[i] < 0) and (square_Vy[i] < 0):
        square_Vy[i] = randint(minsquare_V, maxsquare_V)
    elif (square_y[i] > screen_ysize-square_size[i]) and (square_Vy[i] > 0):
        square_Vy[i] = randint(-maxsquare_V, minsquare_V)

#CHECK BALL HIT
def ball_hitcheck(event, i):
    if (math.sqrt((event.pos[0]-ball_x[i])**2+(event.pos[1]-ball_y[i])**2) <= ball_r[i]):
        return True
    else:
        return False

#CHECK SQUARE HIT
def square_hitcheck(event, i):
    if (event.pos[0] >= square_x[i]) and (event.pos[0] <= square_x[i] + square_size[i]) and (event.pos[1] >= square_y[i]) and (event.pos[1] <= square_y[i] + square_size[i]):
        return True
    else:
        return False


#CREATING OBJECTS
pygame.init()
screen = pygame.display.set_mode((screen_xsize, screen_ysize))
screen.fill(white)
pygame.display.update()
clock = pygame.time.Clock()
finished = False
print('Starting the game...')
print('Start when the figures appear.')


#START OBJECTS
for i in range(ball_number):
    ball_create(i)
    ball_draw(i)
for i in range(square_number):
    square_create(i)
    square_draw(i)
#DELAY BEFORE GAME
clock.tick(randint(3, 9)/20)


#EVENT ANALYSIS AND TIME SECTION
while not finished:
    clock.tick(FPS)
    timecounter += 1
    if (timecounter == timer):
        finished = True
    for i in range(ball_number):
        ball_wallbounce(i)
        ball_x[i] += ball_Vx[i]*timedelta
        ball_y[i] += ball_Vy[i]*timedelta
        ball_draw(i)
    for i in range(square_number):
        square_wallbounce(i)
        square_x[i] += square_Vx[i]*timedelta
        square_y[i] += square_Vy[i]*timedelta
        square_draw(i)
    pygame.display.update()
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            finished = True
        elif (event.type == pygame.MOUSEBUTTONDOWN) and (event.button == 1):
            for i in range(ball_number):
                if ball_hitcheck(event, i) == True:
                    player_score += ball_points
                    print('Your current score:', player_score)
                    ball_create(i)
            for i in range(square_number):
                if square_hitcheck(event, i) == True:
                    player_score += square_points
                    print('Your current score:', player_score)
                    square_create(i)
    screen.fill(white)


print('The game is over. Your final score:', player_score, '. Great job!')
clock.tick(0.33)
pygame.quit()
