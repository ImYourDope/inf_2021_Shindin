import math
from random import choice
import random
import pygame

#PARRAMETERS LIST
FPS = 30
screen_width = 800
screen_height = 600
gravityacceleration = 50
targets_number = 3
maxgunpower = 200
mingunpower = 100
targetpoints = 1
playerscore = 0
font_name = 'Arial'
font_size = 50
indicator_xsize = 10
indicator_ysize = 100

#COLOR LIST
red = 0xFF0000
blue = 0x0000FF
yellow = 0xFFC91F
green = 0x00FF00
magenta = 0xFF03B8
cyan = 0x00FFCC
black = 0x000000
white = 0xFFFFFF
grey = 0x7D7D7D
colors_list = [red, blue, yellow, green, magenta, cyan]

class Ball:
    def __init__(self, screen, x=40, y=450):
        self.screen = screen
        self.x = x
        self.y = y
        self.r = 8
        self.vx = 0
        self.vy = 0
        self.color = choice(colors_list)
        self.live = 30
        self.live = True

    def move(self):
        self.vy += gravityacceleration/FPS
        self.x += self.vx/FPS
        self.y += self.vy/FPS

    def draw(self):
        pygame.draw.circle(
            self.screen,
            self.color,
            (self.x, self.y),
            self.r)

    def hittest(self, obj):
        if (math.sqrt((self.x-obj.x)**2+(self.y-obj.y)**2) <= (self.r + obj.r)):
            return True
        else:
            return False
    
    def bounce(self):
        if (self.x <= self.r) and (self.vx <= 0):
            self.vx = -self.vx*0.7
        elif (self.x >= screen_width - self.r) and (self.vx >= 0):
            self.vx = -self.vx*0.7
        elif (self.y <= self.r) and (self.vy <= 0):
            self.vy = -self.vy*0.7
        elif (self.y >= screen_height - self.r) and (self.vy >= 0):
            self.vy = -self.vy*0.7

    def disappear(self):
        if (self.y > screen_height-self.r) and (abs(self.vy) < 1):
            self.live = False

class Gun:
    def __init__(self, screen):
        self.screen = screen
        self.f2_power = 100
        self.f2_on = 0
        self.color = grey
        self.x = 40
        self.y = 440
        self.xsize = 40
        self.ysize = 20
        self.an = 1

    def fire2_start(self, event):
            self.f2_on = 1

    def fire2_end(self, event):
            global balls, bullet
            bullet += 1
            new_ball = Ball(self.screen)
            new_ball.r += 5
            self.an = math.atan2((event.pos[1]-new_ball.y), (event.pos[0]-new_ball.x))
            new_ball.vx = self.f2_power * math.cos(self.an)
            new_ball.vy = self.f2_power * math.sin(self.an)
            balls.append(new_ball)
            self.f2_on = 0

    def targetting(self, event):
        if event:
            self.an = math.atan2((event.pos[1]-440), (event.pos[0]-20))
        if self.f2_on:
            self.color = red
        else:
            self.color = grey

    def draw(self):
        surf = pygame.Surface((self.xsize+1, self.ysize+1))
        surf.fill(white)
        surf.set_colorkey(white)
        pygame.draw.rect(
            surf,
            self.color,
            (0, 0, self.xsize, self.ysize)
        )
        if(self.an <= 0):
            self.screen.blit(pygame.transform.rotate(surf, -self.an/math.pi*180), (self.x, self.y-self.xsize*math.sin(-self.an)))
        elif(self.an > 0):
            self.screen.blit(pygame.transform.rotate(surf, -self.an/math.pi*180), (self.x+self.ysize*math.sin(-self.an), self.y))

    def power_up(self):
        if self.f2_on:
            if self.f2_power < maxgunpower:
                self.f2_power += 2.5
            self.color = red
        else:
            self.f2_power = mingunpower
            self.color = grey

    def draw_indicator(self, x, y):
        pygame.draw.rect(self.screen, grey, (x, y, indicator_xsize, indicator_ysize))
        pygame.draw.rect(self.screen, red, (x, y+indicator_ysize-indicator_ysize*(self.f2_power-mingunpower)//(maxgunpower-mingunpower), indicator_xsize, indicator_ysize*(self.f2_power-mingunpower)//(maxgunpower-mingunpower)))


class Target:
    def __init__(self, screen):
        self.points = 1
        self.screen = screen
        self.x = random.randint(600, 780)
        self.y = random.randint(300, 550)
        self.r = random.randint(8, 50)
        self.color = red
        self.live = 1

    def new_target(self):
        self.x = random.randint(600, 780)
        self.y = random.randint(300, 550)
        self.r = random.randint(2, 50)
        self.live = 1

    def draw(self):
        pygame.draw.circle(
            self.screen,
            self.color,
            (self.x, self.y),
            self.r
        )


pygame.init()
screen = pygame.display.set_mode((screen_width, screen_height))
game_font = pygame.font.SysFont(font_name, font_size)
bullet = 0
balls = []
targets = []

clock = pygame.time.Clock()
gun = Gun(screen)
for i in range(targets_number):
    targets.append(Target(screen))
finished = False

while not finished:
    screen.fill(white)
    for t in targets:
        t.draw()
    for b in balls:
        if b.live:
            b.draw()
    gun.draw()
    gun.draw_indicator(10, 390)
    text_score = game_font.render('Score: ' + str(playerscore), True, black)
    screen.blit(text_score, (0, 0))
    pygame.display.update()

    clock.tick(FPS)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            finished = True
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                finished = True
        elif event.type == pygame.MOUSEBUTTONDOWN:
            gun.fire2_start(event)
        elif event.type == pygame.MOUSEBUTTONUP:
            gun.fire2_end(event)
        elif event.type == pygame.MOUSEMOTION:
            gun.targetting(event)

    for b in balls:
        for t in targets:
            b.move()
            b.bounce()
            b.disappear()
            if b.hittest(t) and t.live and b.live:
                t.live = 0
                playerscore += targetpoints
                t.new_target()
    gun.power_up()

pygame.quit()
